"use client";

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useState } from "react";
import { type Message, continueConversationTest } from "@/lib/ai/actions";
import { Button, buttonVariants } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { cn } from "@/lib/utils";
import { Loader2Icon } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { quizAction } from "@/actions/helpers/quizHelpers";
import { useFormState } from "react-dom";
import { SubmitButton } from "@/lib/Form";
import { Card, CardHeader, CardTitle } from "@/components/ui/card";

export function AddQuizDialog({ lessonId }: { lessonId: string }) {
  const [formState, formAction] = useFormState(quizAction, {
    message: "",
  });

  const [conversation, setConversation] = useState<Message>();
  const [input, setInput] = useState<string>("");
  const [diff, setDiff] = useState<string>("medium");
  const [isopen, setIsOpen] = useState<boolean>(false);
  const [isGenerating, setIsGenerating] = useState<boolean>(false);

  return (
    <Dialog
      open={isopen}
      onOpenChange={(v) => {
        if (!v) setIsOpen(v);
      }}
    >
      <DialogTrigger
        className={`${buttonVariants({ variant: "outline" })} cursor-pointer rounded-md`}
        asChild
        onClick={() => setIsOpen(true)}
      >
        <p>Add quiz </p>
      </DialogTrigger>
      <DialogContent className={`sm:w-fit  sm:max-w-[780px]`}>
        <DialogHeader className="">
          <DialogTitle>Create a New Quiz</DialogTitle>
          <DialogDescription>
            Provide a subject for the quiz and it will get generated by AI
          </DialogDescription>
        </DialogHeader>
        <div className="">
          {!isGenerating ? (
            <div>
              {conversation && (
                <Card className="w-full rounded-xl">
                  <CardHeader className="">
                    <CardTitle className="  pb-3 text-xl">
                      {conversation.content}{" "}
                    </CardTitle>
                  </CardHeader>
                  <form action={formAction}>
                    {conversation.display}
                    <input name="lessonId" type="hidden" value={lessonId} />
                    <div className="flex justify-center py-4">
                      <SubmitButton className="rounded-lg bg-blue-900  hover:bg-mainblue">
                        Publish Quiz
                      </SubmitButton>
                    </div>
                  </form>
                </Card>
              )}
            </div>
          ) : (
            <div className="flex items-center justify-center p-5 pb-8">
              <Loader2Icon className="animate-spin text-mainblue" />
            </div>
          )}
          <form
            className={cn(
              "flex justify-between gap-2 ",
              conversation ? "pt-4" : "pt-0",
            )}
            onSubmit={async (e) => {
              e.preventDefault();
              setIsGenerating(true);
              const message = await continueConversationTest(input, diff);
              setIsGenerating(false);
              setConversation(message);
            }}
          >
            <Input
              type="text"
              value={input}
              onChange={(event) => {
                setInput(event.target.value);
              }}
            />
            <Select name="level" value={diff} onValueChange={(e) => setDiff(e)}>
              <SelectTrigger className=" h-12 max-w-[100px] ">
                <SelectValue placeholder="Select a Level" />
              </SelectTrigger>
              <SelectContent>
                <SelectGroup>
                  <SelectLabel>Difficulty</SelectLabel>

                  <SelectItem value="easy">easy</SelectItem>
                  <SelectItem value="medium">medium</SelectItem>
                  <SelectItem value="Hard">Hard</SelectItem>
                </SelectGroup>
              </SelectContent>
            </Select>
          </form>
        </div>
      </DialogContent>
    </Dialog>
  );
}
